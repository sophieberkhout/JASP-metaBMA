c(rep(c("black", "grey68"), nrow(df)), rep("black", 3))
rep(c("black", "grey68"), nrow(df), each = 2)
rep(c("black", "grey68"), each = nrow(df))
library(metaBMA)
data(towels)
mo <- meta_ordered(towels$logOR, towels$SE)
mo
mo <- meta_ordered(logOR, SE, study, towels,
d = prior("norm", c(mean=0, sd=.3), lower=0),
rel.tol=.Machine$double.eps^.15, iter=2000)
mo$estimates["ordered", "mean"]
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("danheck/metaBMA", ref = "master")
devtools::install_github("danheck/metaBMA", ref = "master")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("ggplot2")
devtools::install_github("danheck/metaBMA", ref = "master")
devtools::install_github("danheck/metaBMA", ref = "master")
devtools::install_github("danheck/metaBMA", ref = "master")
install.packages("rstan")
devtools::install_github("danheck/metaBMA", ref = "master")
devtools::install_github("danheck/metaBMA", ref = "master")
devtools::install_github("danheck/metaBMA", ref = "master")
library("callr", lib.loc="~/R/win-library/3.6")
detach("package:callr", unload=TRUE)
devtools::install_github("danheck/metaBMA", ref = "master")
View(towels)
View(towels)
a <- 1:100
b <- rep(0, 100)
df <- data.frame(a = a, b = b)
ggplot(df)
ggplot2::ggplot(df)
ggplot2::ggplot(df, aes(x = a, y = b)) + geom_point()
ggplot2::ggplot(df, ggplot2::aes(x = a, y = b)) + ggplot2::geom_point()
b <- rep(c(0, 1), each = 50)
b
a <- rnorm(100)
a
ggplot2::ggplot(df, ggplot2::aes(x = a, y = 1:100, group = b)) + ggplot2::geom_point()
b
y <- c(1:50, 1:50)
df <- data.frame(x = a, y = y, g = b)
ggplot2::ggplot(df, ggplot2::aes(x = x, y = y, group = g)) + ggplot2::geom_point()
ggplot2::ggplot(df, ggplot2::aes(x = x, y = y, linetype = g)) + ggplot2::geom_point()
ggplot2::ggplot(df, ggplot2::aes(x = x, y = y, linetype = as.factor(g)) + ggplot2::geom_line()
ggplot2::ggplot(df, ggplot2::aes(x = x, y = y, linetype = as.factor(g))) + ggplot2::geom_line()
plot <- ggplot2::ggplot(df, ggplot2::aes(x = x, y = y, linetype = as.factor(g))) + ggplot2::geom_line()
plot <- ggplot2::ggplot(df, ggplot2::aes(x = x, y = y, group = as.factor(g), linetype = as.factor(g))) + ggplot2::geom_line()
plot
plot+ ggplot2::scale_colour_manual(values = c("black", "red", "green", "black"))
plot <- plot+ ggplot2::scale_colour_manual(values = c("black", "red", "green", "black"))
plot
plot + ggplot2::scale_color_discrete()
plot + ggplot2::geom_line(aes(colour = b))
plot + ggplot2::geom_line(ggplot2::aes(colour = b))
plot + ggplot2::geom_line(ggplot2::aes(colour = as.factor(b)))
devtools::install_github("danheck/metaBMA", ref = "master", args='--no-multiarch')
paste("Heterogeneity", expression(tau))
mo$posterior_d()
mo$posterior_d
x <- seq(-10, 10, 0.001)
test <- mo$posterior_d(x)
library(metaBMA)
install.packages("metaBMA")
test <- mo$posterior_d(x)
library(metaBMA)
library("Rcpp", lib.loc="~/R/win-library/3.6")
remove.packages("Rcpp", lib="~/R/win-library/3.6")
install.packages("Rcpp")
install.packages("Rcpp")
library(metaBMA)
test <- mo$posterior_d(x)
m <- meta_bma(towels$logOR, towels$SE)
m$posterior_d
test <- m$posterior_d(x)
test2 <- test[test>0.001]
x[which(test>0.001)]
x <- x[which(test>0.001)]
x <- seq(-10, 10, 0.001)
x <- x[test>0.001]
attr(, m$posterior_d())
attr(, m$posterior_d
)
m$posterior_d
m$estimates
m$estimates[1, 1]
est <- m$estimates[1, 1]
x <- seq(est - 10, est + 10, .001)
library(devtools)
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
install_github("danheck/metaBMA", ref = "master")
install_github("danheck/metaBMA", ref = "master")
install_github("danheck/metaBMA", ref = "master")
install_github("danheck/metaBMA", ref = "master")
install_github("danheck/metaBMA", ref = "master")
install_github("danheck/metaBMA", ref = "master")
Sys.getenv()['PATH']
install.packages("metaBMA", repos = "https://danheck.github.com/drat/")
install.packages("metaBMA", repos = "https://danheck.github.com/drat/")
library(metaBMA)
mo <- meta_ordered(towels$logOR, towels$SE)
mo <- meta_ordered(logOR, SE, study, towels,
d = prior("norm", c(mean=0, sd=.3), lower=0),
rel.tol=.01, iter=1000)
mo <- meta_ordered(logOR, SE, study, towels,
d = prior("norm", c(mean=0, sd=.3), lower=0),
iter=10000)
library(metaBMA)
m <- meta_bma(towels$logOR, towels$SE)
?createJaspState
/jaspState
?jaspState
?jaspResults
library(jaspResults)
m$meta$random$stanfit_dstudy$d
m$meta$random$stanfit_dstudy
m$meta$random$stanfit_dstudy$`dstudy[1]`
m$meta$random$stanfit_dstudy$lp__
rstan::summary(m$meta$random$stanfit_dstudy)
view(m$meta$random$stanfit_dstudy)
viewer(m$meta$random$stanfit_dstudy)
print(m$meta$random$stanfit_dstudy)
stanfit <- m$meta$random$stanfit_dstudy
toupper('b')
numeric(1)
"jasptools" %in% installed.packages()
devtools::install("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/")
devtools::install("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/JASP-R-Interface/jaspResults")
install.packages("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/JASP-R-Interface/jaspResults", type="source, repos=NULL")
install.packages("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/JASP-R-Interface/jaspResults", type="source, repos=NULL)
"
)
install.packages("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/JASP-R-Interface/jaspResults", type="source", repos=NULL)
install.packages("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/JASP-R-Interface/jaspResults", type="source", repos=NULL)
upper = 1.5
val = 1.5
upper=val*1.96
lower=val*-1.96
upper/1.96
devtools::install("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/Tools/jasptools")
install.packages("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/Tools/jasptools", type="source", repos=NULL)
library(jasptools)
develop("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/")
viewPkgOptions()
setPkgOption('module.dir', '/Users/sophi/Documents/JASP-metaBMA/')
warnings()
analysisOptions('BayesianMetaAnalysis')
library(jasptools)
setPkgOption('module.dir', '/Users/sophi/Documents/JASP-metaBMA/')
opts <- analysisOptions('BayesianMetaAnalysis')
opts$priorES <- "cauchy"
opts$priorSE <- "inverseGamma"
opts$forestPlot <- FALSE
opts$orderForest <- "ascendingForest"
opts$BFComputation <- "integration"
opts
opts$effectSize <- "ES"
opts$standardError <- "SE"
run(options=opts, dataset="BCG Vaccine")
install.packages("rjson")
run(options=opts, dataset="BCG Vaccine")
opts
opts$confidenceInterval
opts$confidenceInterval <- list("", "")
run(options=opts, dataset="BCG Vaccine")
run(options=opts, dataset="BCG Vaccine")
opts
opts$lowerTruncCauchy
opts$checkLowerTruncCauchy
opts$checkUpperTruncT
opts$confidenceInterval <- list("", "")
opts$checkUpperTruncCauchy <- FALSE
opts$checkLowerTruncCauchy <- FALSE
run(options=opts, dataset="BCG Vaccine")
run(options=opts, dataset="BCG Vaccine")
opts$forestPlot <- "plotForestBoth"
run(options=opts, dataset="BCG Vaccine")
install.packages("/Users/sophi/surfdrive/Stage JASP/jasp-desktop/JASP-Engine/JASPgraphs/", type="source", repos=NULL)
install.packages("digest")
library(jasptools)
setPkgOption('module.dir', '/Users/sophi/Documents/JASP-metaBMA/')
opts <- analysisOptions('BayesianMetaAnalysis')
opts$priorES <- "cauchy"
opts$priorSE <- "inverseGamma"
opts$forestPlot <- "plotForestBoth"
opts$orderForest <- "ascendingForest"
opts$BFComputation <- "integration"
opts$effectSize <- "ES"
opts$standardError <- "SE"
opts$confidenceInterval <- list("", "")
opts$checkLowerTruncCauchy <- FALSE
opts$checkUpperTruncCauchy <- FALSE
run(options=opts, dataset="BCG Vaccine")
library(JASPgraphs)
library(jasptools)
setPkgOption('module.dir', '/Users/sophi/Documents/JASP-metaBMA/')
opts <- analysisOptions('BayesianMetaAnalysis')
opts$priorES <- "cauchy"
opts$priorSE <- "inverseGamma"
opts$forestPlot <- "plotForestBoth"
opts$orderForest <- "ascendingForest"
opts$BFComputation <- "integration"
opts$effectSize <- "ES"
opts$standardError <- "SE"
opts$confidenceInterval <- list("", "")
opts$checkLowerTruncCauchy <- FALSE
opts$checkUpperTruncCauchy <- FALSE
run(options=opts, dataset="BCG Vaccine")
opts$modelSpecification <- "CRE"
run(options=opts, dataset="BCG Vaccine")
opts$checkLowerTruncCauchy <- TRUE
run(options=opts, dataset="BCG Vaccine")
run(options=opts, dataset="BCG Vaccine")
y
SE
d
tau
metaBMA::meta_ordered
?metaBMA::meta_ordered
iter
iter <- 1000
metaBMA::meta_ordered(y = y,
SE = SE,
d = d,
tau = tau,
# logml = logml,
# logml_iter = logml_iter,
iter = 10000
)
metaBMA::meta_ordered(y = y,
SE = SE,
d = d,
tau = tau,
iter = 1000
)
run(options=opts, dataset="BCG Vaccine")
y
y <- y[1:5]
SE <- SE[1:5]
d <- d[1:5]
d
metaBMA::meta_ordered(y = y,
SE = SE,
d = d,
tau = tau,
# logml = logml,
# logml_iter = logml_iter,
iter = 10000 # because of an issue with stored variables, it is not yet possible to make it reactive.
# chains = chains
)
SE
metaBMA::meta_bma(y = y,
SE = SE,
d = d,
tau = tau,
# logml = logml,
# logml_iter = logml_iter,
iter = 10000 # because of an issue with stored variables, it is not yet possible to make it reactive.
# chains = chains
)
rstan::as.mcmc.list
rstan:::as.mcmc.list
showMethods(rstan:::as.mcmc.list)
rstan:::as.mcmc.list.stanfit
metaBMA:::summary_meta
metaBMA:::summary_stanfit
metaBMA:::summary_meta
opts$BFComputation <- "bridgeSampling"
opts$modelSpecification <- "CRE"
opts$effectSize <- "ES"
opts$standardError <- "SE"
opts$confidenceInterval <- list("", "")
opts$checkLowerTruncCauchy <- TRUE
opts$checkUpperTruncCauchy <- FALSE
run(options=opts, dataset="BCG Vaccine")
metaBMA::meta_ordered(y = y,
SE = SE,
d = d,
tau = tau,
# logml = logml,
# logml_iter = logml_iter,
iter = 10000 # because of an issue with stored variables, it is not yet possible to make it reactive.
# chains = chains
)
opts$modelSpecification <- "RE"
run(options=opts, dataset="BCG Vaccine")
opts <- analysisOptions({
"dynamicModuleCall" : "DevelopmentModule$BayesianMetaAnalysis_exposed",
"id" : 3,
"imageBackground" : "white",
"jaspResults" : true,
"name" : "Bayesian Meta Analysis",
"options" : {
"BF" : "BF10",
"BFComputation" : "integration",
"chainsMCMC" : 4,
"checkForestPlot" : true,
"checkLowerTruncCauchy" : false,
"checkLowerTruncNormal" : false,
"checkLowerTruncT" : false,
"checkUpperTruncCauchy" : false,
"checkUpperTruncNormal" : false,
"checkUpperTruncT" : false,
"confidenceInterval" : [],
"direction" : "allPos",
"effectSize" : "ES",
"esTable" : false,
"forestPlot" : "plotForestBoth",
"informativeCauchyLocation" : 0.0,
"informativeCauchyScale" : 0.7070,
"informativeNormalMean" : 0.0,
"informativeNormalStd" : 0.7070,
"informativeTDf" : 1,
"informativeTLocation" : 0.0,
"informativeTScale" : 0.7070,
"informativehalfTDf" : 1,
"informativehalfTScale" : 0.7070,
"inverseGammaScale" : 0.150,
"inverseGammaShape" : 1.0,
"iterBridge" : 5000,
"iterMCMC" : 2000,
"lowerTruncCauchy" : 0.0,
"lowerTruncNormal" : 0.0,
"lowerTruncT" : 0.0,
"mainTable" : true,
"modelSpecification" : "RE",
"orderForest" : "ascendingForest",
"plotCumForest" : false,
"plotHeight" : 320,
"plotPosterior" : false,
"plotPrior" : false,
"plotSeqPM" : false,
"plotSequential" : false,
"plotWidth" : 480,
"postTable" : false,
"priorES" : "cauchy",
"priorH0FE" : 0.0,
"priorH0RE" : 0.50,
"priorH1FE" : 0.0,
"priorH1RE" : 0.50,
"priorSE" : "inverseGamma",
"shade" : false,
"standardError" : "SE",
"studyLabels" : "",
"upperTruncCauchy" : 0.0,
"upperTruncNormal" : 0.0,
"upperTruncT" : 0.0
},
"perform" : "run",
"ppi" : 316,
"revision" : 34,
"rfile" : "",
"title" : "Bayesian Meta Analysis",
"typeRequest" : "analysis"
})
opts <- analysisOptions('{
"dynamicModuleCall" : "DevelopmentModule$BayesianMetaAnalysis_exposed",
"id" : 3,
"imageBackground" : "white",
"jaspResults" : true,
"name" : "Bayesian Meta Analysis",
"options" : {
"BF" : "BF10",
"BFComputation" : "integration",
"chainsMCMC" : 4,
"checkForestPlot" : true,
"checkLowerTruncCauchy" : false,
"checkLowerTruncNormal" : false,
"checkLowerTruncT" : false,
"checkUpperTruncCauchy" : false,
"checkUpperTruncNormal" : false,
"checkUpperTruncT" : false,
"confidenceInterval" : [],
"direction" : "allPos",
"effectSize" : "ES",
"esTable" : false,
"forestPlot" : "plotForestBoth",
"informativeCauchyLocation" : 0.0,
"informativeCauchyScale" : 0.7070,
"informativeNormalMean" : 0.0,
"informativeNormalStd" : 0.7070,
"informativeTDf" : 1,
"informativeTLocation" : 0.0,
"informativeTScale" : 0.7070,
"informativehalfTDf" : 1,
"informativehalfTScale" : 0.7070,
"inverseGammaScale" : 0.150,
"inverseGammaShape" : 1.0,
"iterBridge" : 5000,
"iterMCMC" : 2000,
"lowerTruncCauchy" : 0.0,
"lowerTruncNormal" : 0.0,
"lowerTruncT" : 0.0,
"mainTable" : true,
"modelSpecification" : "RE",
"orderForest" : "ascendingForest",
"plotCumForest" : false,
"plotHeight" : 320,
"plotPosterior" : false,
"plotPrior" : false,
"plotSeqPM" : false,
"plotSequential" : false,
"plotWidth" : 480,
"postTable" : false,
"priorES" : "cauchy",
"priorH0FE" : 0.0,
"priorH0RE" : 0.50,
"priorH1FE" : 0.0,
"priorH1RE" : 0.50,
"priorSE" : "inverseGamma",
"shade" : false,
"standardError" : "SE",
"studyLabels" : "",
"upperTruncCauchy" : 0.0,
"upperTruncNormal" : 0.0,
"upperTruncT" : 0.0
},
"perform" : "run",
"ppi" : 316,
"revision" : 34,
"rfile" : "",
"title" : "Bayesian Meta Analysis",
"typeRequest" : "analysis"
}')
opts
run(options=opts, dataset="BCG Vaccine")
run("BayesianMetaAnalysis", options=opts, dataset="BCG Vaccine")
run("BayesianMetaAnalysis", options=opts, dataset="BCG Vaccine")
length(c(df$y,
yDiamond))
length(c(as.character(df$studyLabels), model))
df$y
yDiamond
run("BayesianMetaAnalysis", options=opts, dataset="BCG Vaccine")
library(metaBMA)
m <- meta_bma(towels$logOR, towels$SE)
m$meta$random$estimates
t <- c(0,0,0,0)
all(t) == 0
all(t)
all(t==0)
x <- rpois(30, 0)
x
x <- rpois(30, 1)
x
x <- rbeta(30, 1, 1)
x
mean <- mean(x)
plot(x)
hist(x)
mean <- vector()
for(i in 1:1e5){
x <- rbeta(30, 1, 1)
mean[i] <- mean(x)
}
hist(x)
1e5
mean
hist(mean)
m$BF
m$meta$fixed$BF
m$meta$fixed$BF["fixed_H0", "fixed_H1"]
m$meta$ramdom$BF
m$BF
m$inclusion$incl.BF
m$inclusion
m$meta$random$data
m$estimates
m$estimates["fixed", c("2.5%", "97.5%")]
library("JASPgraphs")
x <- seq(-3, 3, length.out = n)
n <- 100
x <- seq(-3, 3, length.out = n)
dfLines <- data.frame(
x = x,
y = c(dnorm(x, 0, 1), dnorm(x, 1, .5)),
g = rep(c("Prior", "Posterior"), each = n)
)
PlotPriorAndPosterior(dfLines)
PlotPriorAndPosterior(dfLines)
library(devtools)
install_github("JASPgraphs")
devtools::install_github("vandenman/JASPgraphs")
library(JASPgraphs)
PlotPriorAndPosterior(dfLines)
dfPoints <- data.frame(
x = c(0, 0),
y = dnorm(0, c(0, 1), c(1, .5)),
g = c("Prior", "Posterior")
)
PlotPriorAndPosterior(dfLines, dfPoints)
dev.off()
dev.off()
PlotPriorAndPosterior(dfLines)
PlotPriorAndPosterior(dfLines, dfPoints)
# add BF pizza
BF10 <- dnorm(0, 1, .5) / dnorm(0, 0, 1)
BF10
PlotPriorAndPosterior(dfLines, dfPoints, BF10,      bfType = "BF10") # default
plot <- PlotPriorAndPosterior(dfLines, dfPoints, BF10,      bfType = "BF10") # default
plot$subplots$mainGraph <- plot$subplots$mainGraph + ggplot2::scale_linetype_manual(values = c("solid", "solid"))
plot
plot$subplots$mainGraph <- plot$subplots$mainGraph +
ggplot2::geom_vline(xintercept = 0, linetype = "dotted")
plot
